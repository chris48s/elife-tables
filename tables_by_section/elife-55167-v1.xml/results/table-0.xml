<table-wrap xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" id="table1" position="float"><label>Table 1.</label><caption><title>Table of spike sorting algorithms currently included in the SpikeForest analysis.</title><p>Each algorithm is registered into the system via a Python wrapper. A Docker recipe defines the operating system and environment where the sorter is run. Algorithms with asterisks were updated and optimized using SpikeForest data. For the other algorithms, we used the default or recommended parameters.</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Sorting algorithm</th><th>Language</th><th>Notes</th></tr></thead><tbody><tr><td>HerdingSpikes2*</td><td>Python</td><td>Designed for large-scale, high-density multielectrode arrays. See <xref ref-type="bibr" rid="bib37">Hilgen et al., 2017</xref>.</td></tr><tr><td>IronClust*</td><td>MATLAB and CUDA</td><td>Derived from JRCLUST. See Jun et al., in&#160;preparation.</td></tr><tr><td>JRCLUST</td><td>MATLAB and CUDA</td><td>Designed for high-density silicon probes. See <xref ref-type="bibr" rid="bib41">Jun et al., 2017a</xref>.</td></tr><tr><td>KiloSort</td><td>MATLAB and CUDA</td><td>Template matching. See <xref ref-type="bibr" rid="bib60">Pachitariu et al., 2016</xref>.</td></tr><tr><td>KiloSort2</td><td>MATLAB and CUDA</td><td>Derived from KiloSort. See <xref ref-type="bibr" rid="bib61">Pachitariu et al., 2019</xref>.</td></tr><tr><td>Klusta</td><td>Python</td><td>Expectation-Maximization masked clustering. See <xref ref-type="bibr" rid="bib68">Rossant et al., 2016</xref>.</td></tr><tr><td>MountainSort4</td><td>Python and C++</td><td>Density-based clustering via ISO-SPLIT. See <xref ref-type="bibr" rid="bib14">Chung et al., 2017</xref>.</td></tr><tr><td>SpyKING CIRCUS*</td><td>Python and MPI</td><td>Density-based clustering and template matching. See <xref ref-type="bibr" rid="bib78">Yger et al., 2018</xref>.</td></tr><tr><td>Tridesclous*</td><td>Python and OpenCL</td><td>See <xref ref-type="bibr" rid="bib27">Garcia and Pouzat, 2019</xref>.</td></tr><tr><td>WaveClus</td><td>MATLAB</td><td>Superparamagnetic clustering. See <xref ref-type="bibr" rid="bib13">Chaure et al., 2018</xref>; <xref ref-type="bibr" rid="bib65">Quiroga et al., 2004</xref>.</td></tr></tbody></table></table-wrap>